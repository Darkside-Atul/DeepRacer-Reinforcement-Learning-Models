import math

def reward_function(params):
    """
    Reward function optimized for fastest lap time while maintaining safety.
    """
    
    # Read input parameters
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    steering_angle = params['steering_angle']
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    progress = params['progress']
    steps = params['steps']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    is_left_of_center = params['is_left_of_center']

    # Initialize reward
    reward = 1.0

    # Strongly penalize going off track
    if not all_wheels_on_track:
        return 1e-3

    # Calculate the ideal racing line
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)

    # Reward for following the ideal racing line
    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff
    direction_reward = 1 - (direction_diff / 180.0)
    reward *= (1 + direction_reward)

    # Reward for speed (exponential to heavily favor high speeds)
    SPEED_THRESHOLD = 3.0  # Adjust based on max speed in your action space
    speed_reward = (speed / SPEED_THRESHOLD) ** 2
    reward *= (1.0 + speed_reward)

    # Penalize excessive steering
    ABS_STEERING_THRESHOLD = 25.0
    steering_penalty = (ABS_STEERING_THRESHOLD - abs(steering_angle)) / ABS_STEERING_THRESHOLD
    reward *= (1 + steering_penalty)

    # Reward for track position (favor inside line on turns, center on straights)
    distance_reward = 1 - (distance_from_center / (track_width / 2)) ** 2
    if abs(steering_angle) > 15:  # We're in a turn
        if (steering_angle > 0 and is_left_of_center) or (steering_angle < 0 and not is_left_of_center):
            distance_reward *= 1.5  # Bonus for taking inside line
    reward *= (1 + distance_reward)

    # Reward for progress
    reward *= (1 + progress / 100)

    # Reward for faster lap time
    EXPECTED_STEPS = 500  # Adjust based on your track
    steps_reward = (EXPECTED_STEPS - steps) / EXPECTED_STEPS
    reward *= (1 + max(steps_reward, 0))  # Ensure non-negative

    return float(reward)
